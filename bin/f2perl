#!/usr/bin/perl -w
#
#    f2perl - a perl script to convert fortran 77 files to perl
#

############################################################
#
# The MIT License
# 
# Copyright (c) 2018 Steven Hancock
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
############################################################

use strict;

use 5.004;    # need IO::File from 5.004 or later
use IO::File;
use Getopt::Long;
use Fortran::F77toPerl;

package main;

sub main {

    my $usage = <<EOM;
  f2perl file.f

  (output goes to file.pl)
    
EOM
    my @option_string = qw(
      h|help
      v|version
    );
    my %Opts = ();
    if ( !GetOptions( \%Opts, @option_string ) ) {
        die " Use -h for help\n";
    }
    if ( $Opts{h} ) { print $usage; exit 1; }
    if ( $Opts{v} ) {
        print "f2perl version $Fortran::F77toPerl::VERSION\n";
        exit 1;
    }

    # begin loop over files
    foreach my $input_file (@ARGV) {

        unless ( -e $input_file ) {
            print STDERR "skipping file:$input_file : does not exist\n";
            next;
        }
        unless ( -f $input_file ) {
            print STDERR "skipping file:$input_file : not a regular file \n";
            next;
        }
        unless ( -T $input_file ) {
            print STDERR "skipping file:$input_file : Non-text\n";
            next;
        }
        my $input_file_permissions = ( stat $input_file )[2] & 07777;

        # Create an output file name
        # This is slightly system dependent and needs to be fixed for VMS
        my $output_file = $input_file;
        if ( $output_file =~ /^(.+)\.[fF][^.]*$/ ) {
            $output_file = $1;
        }
        $output_file .= ".pl";
        open OUT, ">$output_file" || die "cannot open output file $output_file: $!\n";

        my $output;
        Fortran::F77toPerl::f2perl(
            _source      => $input_file,
            _destination => \$output,
        );

        print OUT $output;

        # give output script same permissions as input script
        # but make it writable
        chmod( $input_file_permissions | 0600, $output_file )
          if ($input_file_permissions);
        close OUT;
    }    # end loop over input files
}
&main;
__END__
