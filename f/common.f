c
c     test common block coding
c
c Note: Running the code generated by this will produce warnings 
c for variables named q and x:
c Ambiguous use of *{q} resolved to *q at (eval 2) line 1.
c Ambiguous use of *{x} resolved to *x at (eval 9) line 1.
c The best solution is to rename them.

      program common
c
c     a common with negative indexes      
c     and parameterized array limits
      parameter(NQ=4)
      parameter(NG=40+NQ)
      parameter(NM=5*NG)
      common/lcs/x0(3,-2:NM),x(3,-2:NM,5),xin(3,-2:NM)
      x(1,-2,5)=4.0*atan2(1.,1.)

      call aa
      call bb
      call cc
      stop '**bye**'
      end

      subroutine aa
c
c     The first declaration of a common block is taken as its template,
c     and access is cleanest for routines which follow the template.
      parameter(imax=5,jmax=10)
      common /a/ x,y,z
c
c     Note the continuation of the declarations of /a/
      common/a/ q(imax,jmax),p
      q(5,10)=23
      x=1
      y=2
      z=3
      p=13
      return
      end

      subroutine bb
c
c     Access /a/ with new names.
c     This differs from the first declaration of /a/, so access
c     will produce more complex code.
      common /a/ u,v,w,p(5,10),q
      print *, 'u,v,w=',u,v,w,p(5,10),q
      return
      end

      subroutine cc
      parameter(NQ=4)
      parameter(NG=40+NQ)
      parameter(NM=5*NG)
      common/lcs/x0(3,-2:NM),x(3,-2:NM,5),xin(3,-2:NM)
      print *,'pi=',x(1,-2,5)
      return
      end
